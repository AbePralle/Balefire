module Balefire

class Font
  PROPERTIES
    height          : Int32
    scale           = XY(1,1)
    characters      = FontCharacterInfo[](128)
    kerning         : Int32[]
      # Format; kerning[] is indexed into by the "prev_ch" FontCharacterInfo.
      #
      #   [count_x,next1,offset1,next2,offset2,..., count_y,next1,offset1,...]
      #
      # Conceptual Equivalent:
      #   local prev_ch = ... : Character
      #   local cur_ch = ...  : Character
      #   if (kerning and kerning.contains(prev_ch) and kerning[prev_ch].contains(cur_ch))
      #     cursor_x += kerning[prev_ch][cur_ch]
      #   endIf
      #
      # This kerning data structure:
      #   local prev_ch = ... : FontCharacterInfo
      #   local cur_ch = ...  : FontCharacterInfo
      #   local i = prev_ch.kerning_index
      #   if (i)
      #     local n = kerning[i]
      #     ++i
      #     loop n
      #       if (kerning[i] == prev_ch.character)
      #         cursor_x += kerning[i+1]
      #         escapeLoop
      #       endIf
      #       i += 2
      #     endLoop
      #   endIf
      #

  METHODS
    method init( @height )

    method add( ch:FontCharacterInfo )
      characters.expand_to_include( ch.character )
      characters[ch.character] = ch

    method draw( text:String, position:XY, style=Style():Style, span=null:Span? )
      draw( text, position.x, position.y, &=style, &=span )

    method draw( text:StringBuilder, position:XY, style=Style():Style, span=null:Span? )
      draw( text, position.x, position.y, &=style, &=span )

    method draw( text:String, x:Real64, y:Real64, style=Style():Style, span=null:Span? )
      use builder = StringBuilder.pool
        builder.reserve( text.count )
        builder.print( text )
        draw( builder, x, y, &=style, &=span )
      endUse

    method draw( text:StringBuilder, x:Real64, y:Real64, style=Style():Style, span=null:Span? )
      localize height
      height *= style.scale.y
      local scale_x = style.scale.x
      scale_x *= style.scale.x

      if (not span) span = Span(0,text.count)
      local i1 = span.value.index
      local i2 = (i1 + span.value.count) - 1

      if (style.anchor != Anchor.TOP_LEFT)
        local size = measure( text, &=style, &=span )
        local pos = Box(size).positioned_within( Canvas.bounds, style.anchor )
        x = pos.x
        y = pos.y
      endIf

      style.anchor = Anchor.TOP_LEFT

      local prev_info : FontCharacterInfo?
      local x1 = x
      forEach (i in i1..i2)
        local ch = text[i]
        if (ch == '\n')
          x = x1
          y += height
          prev_info = null
        else
          local info = this[ch]
          if (info)
            block info = info.value
              if (prev_info)
                local ki = prev_info.value.kerning_index
                if (ki)
                  local n = kerning[ki]
                  ++ki
                  loop (n)
                    if (kerning[ki] == ch)
                      x += Int32( kerning[ki+1] * scale_x )
                      escapeLoop
                    endIf
                    ki += 2
                  endLoop
                endIf
              endIf
              info.image.draw( XY(x+(info.offset_x*scale_x).floor,y), style )
              x += Int32( info.advance_x * scale_x )
            endBlock
          endIf
          prev_info = info
        endIf
      endForEach

    method get( ch:Character )->FontCharacterInfo?
      if (ch >= characters.count)
        return null
      else
        return characters[ ch ]
      endIf

    method height->Int32
      return @height * scale.y

    method measure( text:String, style=Style():Style, span=null:Span? )->XY
      use builder = StringBuilder.pool
        builder.print( text )
        return measure( builder, &=style, &=span )
      endUse

    method measure( text:StringBuilder, style=Style():Style, span=null:Span? )->XY
      if (not span) span = Span(0,text.count)
      local i1 = span.value.index
      local i2 = (i1 + span.value.count) - 1

      localize height
      height *= style.scale.y
      local scale_x = style.scale.x
      scale_x *= style.scale.x

      local w = 0
      local max_w = 0
      local h = 0
      local prev_info : FontCharacterInfo?
      forEach (i in i1..i2)
        local ch = text[i]
        if (ch == '\n')
          max_w .= or_larger( w )
          w = 0
          h += height
          prev_info = null
        else
          local info = this[ch]
          if (info)
            if (prev_info)
              local ki = prev_info.value.kerning_index
              if (ki)
                local n = kerning[ki]
                ++ki
                loop (n)
                  if (kerning[ki] == ch)
                    w += Int32( kerning[ki+1] * scale_x )
                    escapeLoop
                  endIf
                  ki += 2
                endLoop
              endIf
            endIf
            w += Int32( info.value.advance_x * scale.x )
          endIf
          prev_info = info
        endIf
      endForEach

      max_w .= or_larger( w )
      h += height

      return XY( max_w, h )

    method set_height( new_height:Int32 )
      @scale = XY( scale.x, new_height/Real64(@height) )

    method set_scale( @scale )

    method set_scale( k:Real64 )
      @scale = XY(k,k)
endClass

class FontCharacterInfo( character:Character, offset_x:Int32, advance_x:Int32, kerning_index:Int32, image:Image ) [compound]
  # kerning
  #   Advance mappings for this as the previous character.
endClass

